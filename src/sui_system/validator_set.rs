// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `ValidatorSet.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:nakji.sui.ValidatorSet.PoolTokenExchangeRate)
pub struct PoolTokenExchangeRate {
    // message fields
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.PoolTokenExchangeRate.pool_token_amount)
    pub pool_token_amount: u64,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.PoolTokenExchangeRate.sui_amount)
    pub sui_amount: u64,
    // special fields
    // @@protoc_insertion_point(special_field:nakji.sui.ValidatorSet.PoolTokenExchangeRate.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a PoolTokenExchangeRate {
    fn default() -> &'a PoolTokenExchangeRate {
        <PoolTokenExchangeRate as ::protobuf::Message>::default_instance()
    }
}

impl PoolTokenExchangeRate {
    pub fn new() -> PoolTokenExchangeRate {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pool_token_amount",
            |m: &PoolTokenExchangeRate| { &m.pool_token_amount },
            |m: &mut PoolTokenExchangeRate| { &mut m.pool_token_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "sui_amount",
            |m: &PoolTokenExchangeRate| { &m.sui_amount },
            |m: &mut PoolTokenExchangeRate| { &mut m.sui_amount },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<PoolTokenExchangeRate>(
            "PoolTokenExchangeRate",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for PoolTokenExchangeRate {
    const NAME: &'static str = "PoolTokenExchangeRate";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.pool_token_amount = is.read_uint64()?;
                },
                16 => {
                    self.sui_amount = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.pool_token_amount != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.pool_token_amount);
        }
        if self.sui_amount != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.sui_amount);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.pool_token_amount != 0 {
            os.write_uint64(1, self.pool_token_amount)?;
        }
        if self.sui_amount != 0 {
            os.write_uint64(2, self.sui_amount)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> PoolTokenExchangeRate {
        PoolTokenExchangeRate::new()
    }

    fn clear(&mut self) {
        self.pool_token_amount = 0;
        self.sui_amount = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static PoolTokenExchangeRate {
        static instance: PoolTokenExchangeRate = PoolTokenExchangeRate {
            pool_token_amount: 0,
            sui_amount: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for PoolTokenExchangeRate {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("PoolTokenExchangeRate").unwrap()).clone()
    }
}

impl ::std::fmt::Display for PoolTokenExchangeRate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PoolTokenExchangeRate {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2)
pub struct ValidatorEpochInfoEventV2 {
    // message fields
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.ts)
    pub ts: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.tx_digest)
    pub tx_digest: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.event_seq)
    pub event_seq: u64,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.epoch)
    pub epoch: u64,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.validator_address)
    pub validator_address: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.reference_gas_survey_quote)
    pub reference_gas_survey_quote: u64,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.stake)
    pub stake: u64,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.commission_rate)
    pub commission_rate: u64,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.pool_staking_reward)
    pub pool_staking_reward: u64,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.storage_fund_staking_reward)
    pub storage_fund_staking_reward: u64,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.pool_token_exchange_rate)
    pub pool_token_exchange_rate: ::protobuf::MessageField<PoolTokenExchangeRate>,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.tallying_rule_reporters)
    pub tallying_rule_reporters: ::std::vec::Vec<::std::vec::Vec<u8>>,
    // @@protoc_insertion_point(field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.tallying_rule_global_score)
    pub tallying_rule_global_score: u64,
    // special fields
    // @@protoc_insertion_point(special_field:nakji.sui.ValidatorSet.ValidatorEpochInfoEventV2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ValidatorEpochInfoEventV2 {
    fn default() -> &'a ValidatorEpochInfoEventV2 {
        <ValidatorEpochInfoEventV2 as ::protobuf::Message>::default_instance()
    }
}

impl ValidatorEpochInfoEventV2 {
    pub fn new() -> ValidatorEpochInfoEventV2 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(13);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "ts",
            |m: &ValidatorEpochInfoEventV2| { &m.ts },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.ts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_digest",
            |m: &ValidatorEpochInfoEventV2| { &m.tx_digest },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.tx_digest },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "event_seq",
            |m: &ValidatorEpochInfoEventV2| { &m.event_seq },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.event_seq },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "epoch",
            |m: &ValidatorEpochInfoEventV2| { &m.epoch },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.epoch },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "validator_address",
            |m: &ValidatorEpochInfoEventV2| { &m.validator_address },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.validator_address },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "reference_gas_survey_quote",
            |m: &ValidatorEpochInfoEventV2| { &m.reference_gas_survey_quote },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.reference_gas_survey_quote },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "stake",
            |m: &ValidatorEpochInfoEventV2| { &m.stake },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.stake },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "commission_rate",
            |m: &ValidatorEpochInfoEventV2| { &m.commission_rate },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.commission_rate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pool_staking_reward",
            |m: &ValidatorEpochInfoEventV2| { &m.pool_staking_reward },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.pool_staking_reward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "storage_fund_staking_reward",
            |m: &ValidatorEpochInfoEventV2| { &m.storage_fund_staking_reward },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.storage_fund_staking_reward },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, PoolTokenExchangeRate>(
            "pool_token_exchange_rate",
            |m: &ValidatorEpochInfoEventV2| { &m.pool_token_exchange_rate },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.pool_token_exchange_rate },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "tallying_rule_reporters",
            |m: &ValidatorEpochInfoEventV2| { &m.tallying_rule_reporters },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.tallying_rule_reporters },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tallying_rule_global_score",
            |m: &ValidatorEpochInfoEventV2| { &m.tallying_rule_global_score },
            |m: &mut ValidatorEpochInfoEventV2| { &mut m.tallying_rule_global_score },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ValidatorEpochInfoEventV2>(
            "ValidatorEpochInfoEventV2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ValidatorEpochInfoEventV2 {
    const NAME: &'static str = "ValidatorEpochInfoEventV2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ts)?;
                },
                18 => {
                    self.tx_digest = is.read_bytes()?;
                },
                24 => {
                    self.event_seq = is.read_uint64()?;
                },
                32 => {
                    self.epoch = is.read_uint64()?;
                },
                42 => {
                    self.validator_address = is.read_bytes()?;
                },
                48 => {
                    self.reference_gas_survey_quote = is.read_uint64()?;
                },
                56 => {
                    self.stake = is.read_uint64()?;
                },
                64 => {
                    self.commission_rate = is.read_uint64()?;
                },
                72 => {
                    self.pool_staking_reward = is.read_uint64()?;
                },
                80 => {
                    self.storage_fund_staking_reward = is.read_uint64()?;
                },
                90 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.pool_token_exchange_rate)?;
                },
                98 => {
                    self.tallying_rule_reporters.push(is.read_bytes()?);
                },
                104 => {
                    self.tallying_rule_global_score = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.tx_digest.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.tx_digest);
        }
        if self.event_seq != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.event_seq);
        }
        if self.epoch != 0 {
            my_size += ::protobuf::rt::uint64_size(4, self.epoch);
        }
        if !self.validator_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.validator_address);
        }
        if self.reference_gas_survey_quote != 0 {
            my_size += ::protobuf::rt::uint64_size(6, self.reference_gas_survey_quote);
        }
        if self.stake != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.stake);
        }
        if self.commission_rate != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.commission_rate);
        }
        if self.pool_staking_reward != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.pool_staking_reward);
        }
        if self.storage_fund_staking_reward != 0 {
            my_size += ::protobuf::rt::uint64_size(10, self.storage_fund_staking_reward);
        }
        if let Some(v) = self.pool_token_exchange_rate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        for value in &self.tallying_rule_reporters {
            my_size += ::protobuf::rt::bytes_size(12, &value);
        };
        if self.tallying_rule_global_score != 0 {
            my_size += ::protobuf::rt::uint64_size(13, self.tallying_rule_global_score);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ts.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.tx_digest.is_empty() {
            os.write_bytes(2, &self.tx_digest)?;
        }
        if self.event_seq != 0 {
            os.write_uint64(3, self.event_seq)?;
        }
        if self.epoch != 0 {
            os.write_uint64(4, self.epoch)?;
        }
        if !self.validator_address.is_empty() {
            os.write_bytes(5, &self.validator_address)?;
        }
        if self.reference_gas_survey_quote != 0 {
            os.write_uint64(6, self.reference_gas_survey_quote)?;
        }
        if self.stake != 0 {
            os.write_uint64(7, self.stake)?;
        }
        if self.commission_rate != 0 {
            os.write_uint64(8, self.commission_rate)?;
        }
        if self.pool_staking_reward != 0 {
            os.write_uint64(9, self.pool_staking_reward)?;
        }
        if self.storage_fund_staking_reward != 0 {
            os.write_uint64(10, self.storage_fund_staking_reward)?;
        }
        if let Some(v) = self.pool_token_exchange_rate.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(11, v, os)?;
        }
        for v in &self.tallying_rule_reporters {
            os.write_bytes(12, &v)?;
        };
        if self.tallying_rule_global_score != 0 {
            os.write_uint64(13, self.tallying_rule_global_score)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ValidatorEpochInfoEventV2 {
        ValidatorEpochInfoEventV2::new()
    }

    fn clear(&mut self) {
        self.ts.clear();
        self.tx_digest.clear();
        self.event_seq = 0;
        self.epoch = 0;
        self.validator_address.clear();
        self.reference_gas_survey_quote = 0;
        self.stake = 0;
        self.commission_rate = 0;
        self.pool_staking_reward = 0;
        self.storage_fund_staking_reward = 0;
        self.pool_token_exchange_rate.clear();
        self.tallying_rule_reporters.clear();
        self.tallying_rule_global_score = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ValidatorEpochInfoEventV2 {
        static instance: ValidatorEpochInfoEventV2 = ValidatorEpochInfoEventV2 {
            ts: ::protobuf::MessageField::none(),
            tx_digest: ::std::vec::Vec::new(),
            event_seq: 0,
            epoch: 0,
            validator_address: ::std::vec::Vec::new(),
            reference_gas_survey_quote: 0,
            stake: 0,
            commission_rate: 0,
            pool_staking_reward: 0,
            storage_fund_staking_reward: 0,
            pool_token_exchange_rate: ::protobuf::MessageField::none(),
            tallying_rule_reporters: ::std::vec::Vec::new(),
            tallying_rule_global_score: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ValidatorEpochInfoEventV2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ValidatorEpochInfoEventV2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ValidatorEpochInfoEventV2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidatorEpochInfoEventV2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x12ValidatorSet.proto\x12\x16nakji.sui.ValidatorSet\x1a\x1fgoogle/pro\
    tobuf/timestamp.proto\"b\n\x15PoolTokenExchangeRate\x12*\n\x11pool_token\
    _amount\x18\x01\x20\x01(\x04R\x0fpoolTokenAmount\x12\x1d\n\nsui_amount\
    \x18\x02\x20\x01(\x04R\tsuiAmount\"\x8c\x05\n\x19ValidatorEpochInfoEvent\
    V2\x12*\n\x02ts\x18\x01\x20\x01(\x0b2\x1a.google.protobuf.TimestampR\x02\
    ts\x12\x1b\n\ttx_digest\x18\x02\x20\x01(\x0cR\x08txDigest\x12\x1b\n\teve\
    nt_seq\x18\x03\x20\x01(\x04R\x08eventSeq\x12\x14\n\x05epoch\x18\x04\x20\
    \x01(\x04R\x05epoch\x12+\n\x11validator_address\x18\x05\x20\x01(\x0cR\
    \x10validatorAddress\x12;\n\x1areference_gas_survey_quote\x18\x06\x20\
    \x01(\x04R\x17referenceGasSurveyQuote\x12\x14\n\x05stake\x18\x07\x20\x01\
    (\x04R\x05stake\x12'\n\x0fcommission_rate\x18\x08\x20\x01(\x04R\x0ecommi\
    ssionRate\x12.\n\x13pool_staking_reward\x18\t\x20\x01(\x04R\x11poolStaki\
    ngReward\x12=\n\x1bstorage_fund_staking_reward\x18\n\x20\x01(\x04R\x18st\
    orageFundStakingReward\x12f\n\x18pool_token_exchange_rate\x18\x0b\x20\
    \x01(\x0b2-.nakji.sui.ValidatorSet.PoolTokenExchangeRateR\x15poolTokenEx\
    changeRate\x126\n\x17tallying_rule_reporters\x18\x0c\x20\x03(\x0cR\x15ta\
    llyingRuleReporters\x12;\n\x1atallying_rule_global_score\x18\r\x20\x01(\
    \x04R\x17tallyingRuleGlobalScoreB)Z'github.com/nakji-network/connectors/\
    suiJ\xb3\x07\n\x06\x12\x04\0\0\x1b\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\
    \t\n\x02\x03\0\x12\x03\x02\0)\n\x08\n\x01\x02\x12\x03\x04\0\x1f\n\x08\n\
    \x01\x08\x12\x03\x06\0>\n\t\n\x02\x08\x0b\x12\x03\x06\0>\n\n\n\x02\x04\0\
    \x12\x04\x08\0\x0b\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x1d\n\x0b\n\
    \x04\x04\0\x02\0\x12\x03\t\x04!\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\t\
    \x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\x0b\x1c\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\t\x1f\x20\n\x0b\n\x04\x04\0\x02\x01\x12\x03\n\x04\x1a\
    \n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\n\x0b\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\n\x18\x19\n\
    \n\n\x02\x04\x01\x12\x04\r\0\x1b\x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\
    !\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x0e\x04%\n\x0c\n\x05\x04\x01\x02\0\
    \x06\x12\x03\x0e\x04\x1d\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x0e\x1e\
    \x20\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0e#$\n\x0b\n\x04\x04\x01\x02\
    \x01\x12\x03\x0f\x04\x18\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x0f\x04\
    \t\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x0f\n\x13\n\x0c\n\x05\x04\x01\
    \x02\x01\x03\x12\x03\x0f\x16\x17\n\x0b\n\x04\x04\x01\x02\x02\x12\x03\x10\
    \x04\x19\n\x0c\n\x05\x04\x01\x02\x02\x05\x12\x03\x10\x04\n\n\x0c\n\x05\
    \x04\x01\x02\x02\x01\x12\x03\x10\x0b\x14\n\x0c\n\x05\x04\x01\x02\x02\x03\
    \x12\x03\x10\x17\x18\n\x0b\n\x04\x04\x01\x02\x03\x12\x03\x11\x04\x15\n\
    \x0c\n\x05\x04\x01\x02\x03\x05\x12\x03\x11\x04\n\n\x0c\n\x05\x04\x01\x02\
    \x03\x01\x12\x03\x11\x0b\x10\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03\x11\
    \x13\x14\n\x0b\n\x04\x04\x01\x02\x04\x12\x03\x12\x04\x20\n\x0c\n\x05\x04\
    \x01\x02\x04\x05\x12\x03\x12\x04\t\n\x0c\n\x05\x04\x01\x02\x04\x01\x12\
    \x03\x12\n\x1b\n\x0c\n\x05\x04\x01\x02\x04\x03\x12\x03\x12\x1e\x1f\n\x0b\
    \n\x04\x04\x01\x02\x05\x12\x03\x13\x04*\n\x0c\n\x05\x04\x01\x02\x05\x05\
    \x12\x03\x13\x04\n\n\x0c\n\x05\x04\x01\x02\x05\x01\x12\x03\x13\x0b%\n\
    \x0c\n\x05\x04\x01\x02\x05\x03\x12\x03\x13()\n\x0b\n\x04\x04\x01\x02\x06\
    \x12\x03\x14\x04\x15\n\x0c\n\x05\x04\x01\x02\x06\x05\x12\x03\x14\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x06\x01\x12\x03\x14\x0b\x10\n\x0c\n\x05\x04\x01\
    \x02\x06\x03\x12\x03\x14\x13\x14\n\x0b\n\x04\x04\x01\x02\x07\x12\x03\x15\
    \x04\x1f\n\x0c\n\x05\x04\x01\x02\x07\x05\x12\x03\x15\x04\n\n\x0c\n\x05\
    \x04\x01\x02\x07\x01\x12\x03\x15\x0b\x1a\n\x0c\n\x05\x04\x01\x02\x07\x03\
    \x12\x03\x15\x1d\x1e\n\x0b\n\x04\x04\x01\x02\x08\x12\x03\x16\x04#\n\x0c\
    \n\x05\x04\x01\x02\x08\x05\x12\x03\x16\x04\n\n\x0c\n\x05\x04\x01\x02\x08\
    \x01\x12\x03\x16\x0b\x1e\n\x0c\n\x05\x04\x01\x02\x08\x03\x12\x03\x16!\"\
    \n\x0b\n\x04\x04\x01\x02\t\x12\x03\x17\x04,\n\x0c\n\x05\x04\x01\x02\t\
    \x05\x12\x03\x17\x04\n\n\x0c\n\x05\x04\x01\x02\t\x01\x12\x03\x17\x0b&\n\
    \x0c\n\x05\x04\x01\x02\t\x03\x12\x03\x17)+\n\x0b\n\x04\x04\x01\x02\n\x12\
    \x03\x18\x048\n\x0c\n\x05\x04\x01\x02\n\x06\x12\x03\x18\x04\x19\n\x0c\n\
    \x05\x04\x01\x02\n\x01\x12\x03\x18\x1a2\n\x0c\n\x05\x04\x01\x02\n\x03\
    \x12\x03\x1857\n\x0b\n\x04\x04\x01\x02\x0b\x12\x03\x19\x040\n\x0c\n\x05\
    \x04\x01\x02\x0b\x04\x12\x03\x19\x04\x0c\n\x0c\n\x05\x04\x01\x02\x0b\x05\
    \x12\x03\x19\r\x12\n\x0c\n\x05\x04\x01\x02\x0b\x01\x12\x03\x19\x13*\n\
    \x0c\n\x05\x04\x01\x02\x0b\x03\x12\x03\x19-/\n\x0b\n\x04\x04\x01\x02\x0c\
    \x12\x03\x1a\x04+\n\x0c\n\x05\x04\x01\x02\x0c\x05\x12\x03\x1a\x04\n\n\
    \x0c\n\x05\x04\x01\x02\x0c\x01\x12\x03\x1a\x0b%\n\x0c\n\x05\x04\x01\x02\
    \x0c\x03\x12\x03\x1a(*b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(PoolTokenExchangeRate::generated_message_descriptor_data());
            messages.push(ValidatorEpochInfoEventV2::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
