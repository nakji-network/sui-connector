// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pool.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:nakji.sui.pool.SwappedEvent)
pub struct SwappedEvent {
    // message fields
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.ts)
    pub ts: ::protobuf::MessageField<::protobuf::well_known_types::timestamp::Timestamp>,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.tx_digest)
    pub tx_digest: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.event_seq)
    pub event_seq: u64,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.atob)
    pub atob: bool,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.pool)
    pub pool: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.partner)
    pub partner: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.amount_in)
    pub amount_in: u64,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.amount_out)
    pub amount_out: u64,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.ref_amount)
    pub ref_amount: u64,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.fee_amount)
    pub fee_amount: u64,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.vault_a_amount)
    pub vault_a_amount: u64,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.vault_b_amount)
    pub vault_b_amount: u64,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.before_sqrt_price)
    pub before_sqrt_price: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.after_sqrt_price)
    pub after_sqrt_price: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:nakji.sui.pool.SwappedEvent.steps)
    pub steps: u64,
    // special fields
    // @@protoc_insertion_point(special_field:nakji.sui.pool.SwappedEvent.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a SwappedEvent {
    fn default() -> &'a SwappedEvent {
        <SwappedEvent as ::protobuf::Message>::default_instance()
    }
}

impl SwappedEvent {
    pub fn new() -> SwappedEvent {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(15);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, ::protobuf::well_known_types::timestamp::Timestamp>(
            "ts",
            |m: &SwappedEvent| { &m.ts },
            |m: &mut SwappedEvent| { &mut m.ts },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "tx_digest",
            |m: &SwappedEvent| { &m.tx_digest },
            |m: &mut SwappedEvent| { &mut m.tx_digest },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "event_seq",
            |m: &SwappedEvent| { &m.event_seq },
            |m: &mut SwappedEvent| { &mut m.event_seq },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "atob",
            |m: &SwappedEvent| { &m.atob },
            |m: &mut SwappedEvent| { &mut m.atob },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "pool",
            |m: &SwappedEvent| { &m.pool },
            |m: &mut SwappedEvent| { &mut m.pool },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "partner",
            |m: &SwappedEvent| { &m.partner },
            |m: &mut SwappedEvent| { &mut m.partner },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount_in",
            |m: &SwappedEvent| { &m.amount_in },
            |m: &mut SwappedEvent| { &mut m.amount_in },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "amount_out",
            |m: &SwappedEvent| { &m.amount_out },
            |m: &mut SwappedEvent| { &mut m.amount_out },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ref_amount",
            |m: &SwappedEvent| { &m.ref_amount },
            |m: &mut SwappedEvent| { &mut m.ref_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "fee_amount",
            |m: &SwappedEvent| { &m.fee_amount },
            |m: &mut SwappedEvent| { &mut m.fee_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vault_a_amount",
            |m: &SwappedEvent| { &m.vault_a_amount },
            |m: &mut SwappedEvent| { &mut m.vault_a_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "vault_b_amount",
            |m: &SwappedEvent| { &m.vault_b_amount },
            |m: &mut SwappedEvent| { &mut m.vault_b_amount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "before_sqrt_price",
            |m: &SwappedEvent| { &m.before_sqrt_price },
            |m: &mut SwappedEvent| { &mut m.before_sqrt_price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "after_sqrt_price",
            |m: &SwappedEvent| { &m.after_sqrt_price },
            |m: &mut SwappedEvent| { &mut m.after_sqrt_price },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "steps",
            |m: &SwappedEvent| { &m.steps },
            |m: &mut SwappedEvent| { &mut m.steps },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<SwappedEvent>(
            "SwappedEvent",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for SwappedEvent {
    const NAME: &'static str = "SwappedEvent";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.ts)?;
                },
                18 => {
                    self.tx_digest = is.read_bytes()?;
                },
                24 => {
                    self.event_seq = is.read_uint64()?;
                },
                32 => {
                    self.atob = is.read_bool()?;
                },
                42 => {
                    self.pool = is.read_bytes()?;
                },
                50 => {
                    self.partner = is.read_bytes()?;
                },
                56 => {
                    self.amount_in = is.read_uint64()?;
                },
                64 => {
                    self.amount_out = is.read_uint64()?;
                },
                72 => {
                    self.ref_amount = is.read_uint64()?;
                },
                80 => {
                    self.fee_amount = is.read_uint64()?;
                },
                88 => {
                    self.vault_a_amount = is.read_uint64()?;
                },
                96 => {
                    self.vault_b_amount = is.read_uint64()?;
                },
                106 => {
                    self.before_sqrt_price = is.read_bytes()?;
                },
                114 => {
                    self.after_sqrt_price = is.read_bytes()?;
                },
                120 => {
                    self.steps = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.ts.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.tx_digest.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.tx_digest);
        }
        if self.event_seq != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.event_seq);
        }
        if self.atob != false {
            my_size += 1 + 1;
        }
        if !self.pool.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.pool);
        }
        if !self.partner.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.partner);
        }
        if self.amount_in != 0 {
            my_size += ::protobuf::rt::uint64_size(7, self.amount_in);
        }
        if self.amount_out != 0 {
            my_size += ::protobuf::rt::uint64_size(8, self.amount_out);
        }
        if self.ref_amount != 0 {
            my_size += ::protobuf::rt::uint64_size(9, self.ref_amount);
        }
        if self.fee_amount != 0 {
            my_size += ::protobuf::rt::uint64_size(10, self.fee_amount);
        }
        if self.vault_a_amount != 0 {
            my_size += ::protobuf::rt::uint64_size(11, self.vault_a_amount);
        }
        if self.vault_b_amount != 0 {
            my_size += ::protobuf::rt::uint64_size(12, self.vault_b_amount);
        }
        if !self.before_sqrt_price.is_empty() {
            my_size += ::protobuf::rt::bytes_size(13, &self.before_sqrt_price);
        }
        if !self.after_sqrt_price.is_empty() {
            my_size += ::protobuf::rt::bytes_size(14, &self.after_sqrt_price);
        }
        if self.steps != 0 {
            my_size += ::protobuf::rt::uint64_size(15, self.steps);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.ts.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.tx_digest.is_empty() {
            os.write_bytes(2, &self.tx_digest)?;
        }
        if self.event_seq != 0 {
            os.write_uint64(3, self.event_seq)?;
        }
        if self.atob != false {
            os.write_bool(4, self.atob)?;
        }
        if !self.pool.is_empty() {
            os.write_bytes(5, &self.pool)?;
        }
        if !self.partner.is_empty() {
            os.write_bytes(6, &self.partner)?;
        }
        if self.amount_in != 0 {
            os.write_uint64(7, self.amount_in)?;
        }
        if self.amount_out != 0 {
            os.write_uint64(8, self.amount_out)?;
        }
        if self.ref_amount != 0 {
            os.write_uint64(9, self.ref_amount)?;
        }
        if self.fee_amount != 0 {
            os.write_uint64(10, self.fee_amount)?;
        }
        if self.vault_a_amount != 0 {
            os.write_uint64(11, self.vault_a_amount)?;
        }
        if self.vault_b_amount != 0 {
            os.write_uint64(12, self.vault_b_amount)?;
        }
        if !self.before_sqrt_price.is_empty() {
            os.write_bytes(13, &self.before_sqrt_price)?;
        }
        if !self.after_sqrt_price.is_empty() {
            os.write_bytes(14, &self.after_sqrt_price)?;
        }
        if self.steps != 0 {
            os.write_uint64(15, self.steps)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> SwappedEvent {
        SwappedEvent::new()
    }

    fn clear(&mut self) {
        self.ts.clear();
        self.tx_digest.clear();
        self.event_seq = 0;
        self.atob = false;
        self.pool.clear();
        self.partner.clear();
        self.amount_in = 0;
        self.amount_out = 0;
        self.ref_amount = 0;
        self.fee_amount = 0;
        self.vault_a_amount = 0;
        self.vault_b_amount = 0;
        self.before_sqrt_price.clear();
        self.after_sqrt_price.clear();
        self.steps = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static SwappedEvent {
        static instance: SwappedEvent = SwappedEvent {
            ts: ::protobuf::MessageField::none(),
            tx_digest: ::std::vec::Vec::new(),
            event_seq: 0,
            atob: false,
            pool: ::std::vec::Vec::new(),
            partner: ::std::vec::Vec::new(),
            amount_in: 0,
            amount_out: 0,
            ref_amount: 0,
            fee_amount: 0,
            vault_a_amount: 0,
            vault_b_amount: 0,
            before_sqrt_price: ::std::vec::Vec::new(),
            after_sqrt_price: ::std::vec::Vec::new(),
            steps: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for SwappedEvent {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("SwappedEvent").unwrap()).clone()
    }
}

impl ::std::fmt::Display for SwappedEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SwappedEvent {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\npool.proto\x12\x0enakji.sui.pool\x1a\x1fgoogle/protobuf/timestamp.pr\
    oto\"\xe8\x03\n\x0cSwappedEvent\x12*\n\x02ts\x18\x01\x20\x01(\x0b2\x1a.g\
    oogle.protobuf.TimestampR\x02ts\x12\x1b\n\ttx_digest\x18\x02\x20\x01(\
    \x0cR\x08txDigest\x12\x1b\n\tevent_seq\x18\x03\x20\x01(\x04R\x08eventSeq\
    \x12\x12\n\x04atob\x18\x04\x20\x01(\x08R\x04atob\x12\x12\n\x04pool\x18\
    \x05\x20\x01(\x0cR\x04pool\x12\x18\n\x07partner\x18\x06\x20\x01(\x0cR\
    \x07partner\x12\x1b\n\tamount_in\x18\x07\x20\x01(\x04R\x08amountIn\x12\
    \x1d\n\namount_out\x18\x08\x20\x01(\x04R\tamountOut\x12\x1d\n\nref_amoun\
    t\x18\t\x20\x01(\x04R\trefAmount\x12\x1d\n\nfee_amount\x18\n\x20\x01(\
    \x04R\tfeeAmount\x12$\n\x0evault_a_amount\x18\x0b\x20\x01(\x04R\x0cvault\
    AAmount\x12$\n\x0evault_b_amount\x18\x0c\x20\x01(\x04R\x0cvaultBAmount\
    \x12*\n\x11before_sqrt_price\x18\r\x20\x01(\x0cR\x0fbeforeSqrtPrice\x12(\
    \n\x10after_sqrt_price\x18\x0e\x20\x01(\x0cR\x0eafterSqrtPrice\x12\x14\n\
    \x05steps\x18\x0f\x20\x01(\x04R\x05stepsB(Z&github.com/nakji-network/sui\
    -connectorJ\xa3\x07\n\x06\x12\x04\0\0\x18\x01\n\x08\n\x01\x0c\x12\x03\0\
    \0\x12\n\t\n\x02\x03\0\x12\x03\x02\0)\n\x08\n\x01\x02\x12\x03\x04\0\x17\
    \n\x08\n\x01\x08\x12\x03\x06\0=\n\t\n\x02\x08\x0b\x12\x03\x06\0=\n\n\n\
    \x02\x04\0\x12\x04\x08\0\x18\x01\n\n\n\x03\x04\0\x01\x12\x03\x08\x08\x14\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\t\x04%\n\x0c\n\x05\x04\0\x02\0\x06\x12\
    \x03\t\x04\x1d\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\t\x1e\x20\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03\t#$\n\x0b\n\x04\x04\0\x02\x01\x12\x03\n\x04\x18\
    \n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\n\x04\t\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\n\n\x13\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\n\x16\x17\n\
    \x0b\n\x04\x04\0\x02\x02\x12\x03\x0b\x04\x19\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\x0b\x04\n\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x0b\x0b\x14\
    \n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0b\x17\x18\n\x0b\n\x04\x04\0\x02\
    \x03\x12\x03\x0c\x04\x12\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0c\x04\
    \x08\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x0c\t\r\n\x0c\n\x05\x04\0\x02\
    \x03\x03\x12\x03\x0c\x10\x11\n\x0b\n\x04\x04\0\x02\x04\x12\x03\r\x04\x13\
    \n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\r\x04\t\n\x0c\n\x05\x04\0\x02\x04\
    \x01\x12\x03\r\n\x0e\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\r\x11\x12\n\
    \x0b\n\x04\x04\0\x02\x05\x12\x03\x0e\x04\x16\n\x0c\n\x05\x04\0\x02\x05\
    \x05\x12\x03\x0e\x04\t\n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x0e\n\x11\n\
    \x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x0e\x14\x15\n\x0b\n\x04\x04\0\x02\
    \x06\x12\x03\x0f\x04\x19\n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x0f\x04\n\
    \n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x0f\x0b\x14\n\x0c\n\x05\x04\0\x02\
    \x06\x03\x12\x03\x0f\x17\x18\n\x0b\n\x04\x04\0\x02\x07\x12\x03\x10\x04\
    \x1a\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x10\x04\n\n\x0c\n\x05\x04\0\
    \x02\x07\x01\x12\x03\x10\x0b\x15\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\
    \x10\x18\x19\n\x0b\n\x04\x04\0\x02\x08\x12\x03\x11\x04\x1a\n\x0c\n\x05\
    \x04\0\x02\x08\x05\x12\x03\x11\x04\n\n\x0c\n\x05\x04\0\x02\x08\x01\x12\
    \x03\x11\x0b\x15\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x11\x18\x19\n\x0b\
    \n\x04\x04\0\x02\t\x12\x03\x12\x04\x1b\n\x0c\n\x05\x04\0\x02\t\x05\x12\
    \x03\x12\x04\n\n\x0c\n\x05\x04\0\x02\t\x01\x12\x03\x12\x0b\x15\n\x0c\n\
    \x05\x04\0\x02\t\x03\x12\x03\x12\x18\x1a\n\x0b\n\x04\x04\0\x02\n\x12\x03\
    \x13\x04\x1f\n\x0c\n\x05\x04\0\x02\n\x05\x12\x03\x13\x04\n\n\x0c\n\x05\
    \x04\0\x02\n\x01\x12\x03\x13\x0b\x19\n\x0c\n\x05\x04\0\x02\n\x03\x12\x03\
    \x13\x1c\x1e\n\x0b\n\x04\x04\0\x02\x0b\x12\x03\x14\x04\x1f\n\x0c\n\x05\
    \x04\0\x02\x0b\x05\x12\x03\x14\x04\n\n\x0c\n\x05\x04\0\x02\x0b\x01\x12\
    \x03\x14\x0b\x19\n\x0c\n\x05\x04\0\x02\x0b\x03\x12\x03\x14\x1c\x1e\n\x16\
    \n\x04\x04\0\x02\x0c\x12\x03\x15\x04!\"\t\x20uint128\n\n\x0c\n\x05\x04\0\
    \x02\x0c\x05\x12\x03\x15\x04\t\n\x0c\n\x05\x04\0\x02\x0c\x01\x12\x03\x15\
    \n\x1b\n\x0c\n\x05\x04\0\x02\x0c\x03\x12\x03\x15\x1e\x20\n\x16\n\x04\x04\
    \0\x02\r\x12\x03\x16\x04\x20\"\t\x20uint128\n\n\x0c\n\x05\x04\0\x02\r\
    \x05\x12\x03\x16\x04\t\n\x0c\n\x05\x04\0\x02\r\x01\x12\x03\x16\n\x1a\n\
    \x0c\n\x05\x04\0\x02\r\x03\x12\x03\x16\x1d\x1f\n\x0b\n\x04\x04\0\x02\x0e\
    \x12\x03\x17\x04\x16\n\x0c\n\x05\x04\0\x02\x0e\x05\x12\x03\x17\x04\n\n\
    \x0c\n\x05\x04\0\x02\x0e\x01\x12\x03\x17\x0b\x10\n\x0c\n\x05\x04\0\x02\
    \x0e\x03\x12\x03\x17\x13\x15b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(::protobuf::well_known_types::timestamp::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(SwappedEvent::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
